/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface ClusterRewardsInterface extends utils.Interface {
  functions: {
    'CLAIMER_ROLE()': FunctionFragment
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'FEEDER_ROLE()': FunctionFragment
    'RECEIVER_TICKETS_PER_EPOCH()': FunctionFragment
    'addNetwork(bytes32,uint256,address)': FunctionFragment
    'changeRewardPerEpoch(uint256)': FunctionFragment
    'claimReward(address)': FunctionFragment
    'clusterRewards(address)': FunctionFragment
    'clusterSelectors(bytes32)': FunctionFragment
    'feed(bytes32,address[],uint256[],uint256)': FunctionFragment
    'getRewardForEpoch(uint256,bytes32)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'initialize(address,address,address,bytes32[],uint256[],address[],uint256)': FunctionFragment
    'isTicketsIssued(address,uint256)': FunctionFragment
    'issueTickets(bytes32,uint24,uint16[])': FunctionFragment
    'issueTickets(bytes32,uint24[],uint16[][])': FunctionFragment
    'issueTickets(bytes)': FunctionFragment
    'latestNewEpochRewardAt()': FunctionFragment
    'payoutDenomination()': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'receiverStaking()': FunctionFragment
    'removeNetwork(bytes32)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'rewardDistributedPerEpoch(uint256)': FunctionFragment
    'rewardDistributionWaitTime()': FunctionFragment
    'rewardWeight(bytes32)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'ticketsIssued(address,uint256)': FunctionFragment
    'totalRewardWeight()': FunctionFragment
    'totalRewardsPerEpoch()': FunctionFragment
    'updateNetwork(bytes32,uint256,address)': FunctionFragment
    'updateReceiverStaking(address)': FunctionFragment
    'updateRewardWaitTime(uint256)': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'CLAIMER_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'FEEDER_ROLE'
      | 'RECEIVER_TICKETS_PER_EPOCH'
      | 'addNetwork'
      | 'changeRewardPerEpoch'
      | 'claimReward'
      | 'clusterRewards'
      | 'clusterSelectors'
      | 'feed'
      | 'getRewardForEpoch'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'isTicketsIssued'
      | 'issueTickets(bytes32,uint24,uint16[])'
      | 'issueTickets(bytes32,uint24[],uint16[][])'
      | 'issueTickets(bytes)'
      | 'latestNewEpochRewardAt'
      | 'payoutDenomination'
      | 'proxiableUUID'
      | 'receiverStaking'
      | 'removeNetwork'
      | 'renounceRole'
      | 'revokeRole'
      | 'rewardDistributedPerEpoch'
      | 'rewardDistributionWaitTime'
      | 'rewardWeight'
      | 'supportsInterface'
      | 'ticketsIssued'
      | 'totalRewardWeight'
      | 'totalRewardsPerEpoch'
      | 'updateNetwork'
      | 'updateReceiverStaking'
      | 'updateRewardWaitTime'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'CLAIMER_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'FEEDER_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'RECEIVER_TICKETS_PER_EPOCH', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'addNetwork',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'changeRewardPerEpoch', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'claimReward', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'clusterRewards', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'clusterSelectors', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(
    functionFragment: 'feed',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getRewardForEpoch', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'getRoleMember', values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'grantRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(functionFragment: 'isTicketsIssued', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'issueTickets(bytes32,uint24,uint16[])',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'issueTickets(bytes32,uint24[],uint16[][])',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[][]]
  ): string
  encodeFunctionData(functionFragment: 'issueTickets(bytes)', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'latestNewEpochRewardAt', values?: undefined): string
  encodeFunctionData(functionFragment: 'payoutDenomination', values?: undefined): string
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string
  encodeFunctionData(functionFragment: 'receiverStaking', values?: undefined): string
  encodeFunctionData(functionFragment: 'removeNetwork', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'renounceRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'revokeRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'rewardDistributedPerEpoch', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'rewardDistributionWaitTime', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewardWeight', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'ticketsIssued', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'totalRewardWeight', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalRewardsPerEpoch', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'updateNetwork',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'updateReceiverStaking', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'updateRewardWaitTime', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string

  decodeFunctionResult(functionFragment: 'CLAIMER_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'FEEDER_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'RECEIVER_TICKETS_PER_EPOCH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addNetwork', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeRewardPerEpoch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'clusterRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'clusterSelectors', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'feed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRewardForEpoch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isTicketsIssued', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'issueTickets(bytes32,uint24,uint16[])', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'issueTickets(bytes32,uint24[],uint16[][])', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'issueTickets(bytes)', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'latestNewEpochRewardAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payoutDenomination', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'receiverStaking', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeNetwork', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardDistributedPerEpoch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardDistributionWaitTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardWeight', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ticketsIssued', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalRewardWeight', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalRewardsPerEpoch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateNetwork', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateReceiverStaking', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateRewardWaitTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'ClusterRewarded(bytes32)': EventFragment
    'Initialized(uint8)': EventFragment
    'NetworkAdded(bytes32,uint256,address)': EventFragment
    'NetworkRemoved(bytes32)': EventFragment
    'NetworkUpdated(bytes32,uint256,address)': EventFragment
    'ReceiverStakingUpdated(address)': EventFragment
    'RewardDistributionWaitTimeChanged(uint256)': EventFragment
    'RewardPerEpochChanged(uint256)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'TicketsIssued(bytes32,uint256,address)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClusterRewarded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NetworkAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NetworkRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NetworkUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReceiverStakingUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardDistributionWaitTimeChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardPerEpochChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TicketsIssued'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface ClusterRewardedEventObject {
  networkId: string
}
export type ClusterRewardedEvent = TypedEvent<[string], ClusterRewardedEventObject>

export type ClusterRewardedEventFilter = TypedEventFilter<ClusterRewardedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface NetworkAddedEventObject {
  networkId: string
  rewardPerEpoch: BigNumber
  clusterSelector: string
}
export type NetworkAddedEvent = TypedEvent<[string, BigNumber, string], NetworkAddedEventObject>

export type NetworkAddedEventFilter = TypedEventFilter<NetworkAddedEvent>

export interface NetworkRemovedEventObject {
  networkId: string
}
export type NetworkRemovedEvent = TypedEvent<[string], NetworkRemovedEventObject>

export type NetworkRemovedEventFilter = TypedEventFilter<NetworkRemovedEvent>

export interface NetworkUpdatedEventObject {
  networkId: string
  updatedRewardPerEpoch: BigNumber
  clusterSelector: string
}
export type NetworkUpdatedEvent = TypedEvent<[string, BigNumber, string], NetworkUpdatedEventObject>

export type NetworkUpdatedEventFilter = TypedEventFilter<NetworkUpdatedEvent>

export interface ReceiverStakingUpdatedEventObject {
  receiverStaking: string
}
export type ReceiverStakingUpdatedEvent = TypedEvent<[string], ReceiverStakingUpdatedEventObject>

export type ReceiverStakingUpdatedEventFilter = TypedEventFilter<ReceiverStakingUpdatedEvent>

export interface RewardDistributionWaitTimeChangedEventObject {
  updatedWaitTime: BigNumber
}
export type RewardDistributionWaitTimeChangedEvent = TypedEvent<[BigNumber], RewardDistributionWaitTimeChangedEventObject>

export type RewardDistributionWaitTimeChangedEventFilter = TypedEventFilter<RewardDistributionWaitTimeChangedEvent>

export interface RewardPerEpochChangedEventObject {
  updatedRewardPerEpoch: BigNumber
}
export type RewardPerEpochChangedEvent = TypedEvent<[BigNumber], RewardPerEpochChangedEventObject>

export type RewardPerEpochChangedEventFilter = TypedEventFilter<RewardPerEpochChangedEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface TicketsIssuedEventObject {
  networkId: string
  epoch: BigNumber
  user: string
}
export type TicketsIssuedEvent = TypedEvent<[string, BigNumber, string], TicketsIssuedEventObject>

export type TicketsIssuedEventFilter = TypedEventFilter<TicketsIssuedEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface ClusterRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ClusterRewardsInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    CLAIMER_ROLE(overrides?: CallOverrides): Promise<[string]>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    FEEDER_ROLE(overrides?: CallOverrides): Promise<[string]>

    RECEIVER_TICKETS_PER_EPOCH(overrides?: CallOverrides): Promise<[BigNumber]>

    addNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _rewardWeight: PromiseOrValue<BigNumberish>,
      _clusterSelector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    changeRewardPerEpoch(
      _updatedRewardPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    claimReward(_cluster: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    clusterRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    clusterSelectors(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

    feed(
      _networkId: PromiseOrValue<BytesLike>,
      _clusters: PromiseOrValue<string>[],
      _payouts: PromiseOrValue<BigNumberish>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getRewardForEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      _networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    initialize(
      _admin: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _receiverStaking: PromiseOrValue<string>,
      _networkIds: PromiseOrValue<BytesLike>[],
      _rewardWeight: PromiseOrValue<BigNumberish>[],
      _clusterSelectors: PromiseOrValue<string>[],
      _totalRewardsPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    isTicketsIssued(_receiver: PromiseOrValue<string>, _epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

    'issueTickets(bytes32,uint24,uint16[])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epoch: PromiseOrValue<BigNumberish>,
      _tickets: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'issueTickets(bytes32,uint24[],uint16[][])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epochs: PromiseOrValue<BigNumberish>[],
      _tickets: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'issueTickets(bytes)'(
      _ticketInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    latestNewEpochRewardAt(overrides?: CallOverrides): Promise<[BigNumber]>

    payoutDenomination(overrides?: CallOverrides): Promise<[BigNumber]>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    receiverStaking(overrides?: CallOverrides): Promise<[string]>

    removeNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    rewardDistributedPerEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

    rewardDistributionWaitTime(overrides?: CallOverrides): Promise<[BigNumber]>

    rewardWeight(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

    ticketsIssued(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

    totalRewardWeight(overrides?: CallOverrides): Promise<[BigNumber]>

    totalRewardsPerEpoch(overrides?: CallOverrides): Promise<[BigNumber]>

    updateNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _updatedRewardWeight: PromiseOrValue<BigNumberish>,
      _updatedClusterSelector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateReceiverStaking(
      _receiverStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateRewardWaitTime(
      _updatedWaitTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  CLAIMER_ROLE(overrides?: CallOverrides): Promise<string>

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  FEEDER_ROLE(overrides?: CallOverrides): Promise<string>

  RECEIVER_TICKETS_PER_EPOCH(overrides?: CallOverrides): Promise<BigNumber>

  addNetwork(
    _networkId: PromiseOrValue<BytesLike>,
    _rewardWeight: PromiseOrValue<BigNumberish>,
    _clusterSelector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  changeRewardPerEpoch(
    _updatedRewardPerEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  claimReward(_cluster: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  clusterRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  clusterSelectors(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

  feed(
    _networkId: PromiseOrValue<BytesLike>,
    _clusters: PromiseOrValue<string>[],
    _payouts: PromiseOrValue<BigNumberish>[],
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getRewardForEpoch(
    _epoch: PromiseOrValue<BigNumberish>,
    _networkId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

  getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  initialize(
    _admin: PromiseOrValue<string>,
    _claimer: PromiseOrValue<string>,
    _receiverStaking: PromiseOrValue<string>,
    _networkIds: PromiseOrValue<BytesLike>[],
    _rewardWeight: PromiseOrValue<BigNumberish>[],
    _clusterSelectors: PromiseOrValue<string>[],
    _totalRewardsPerEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  isTicketsIssued(_receiver: PromiseOrValue<string>, _epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

  'issueTickets(bytes32,uint24,uint16[])'(
    _networkId: PromiseOrValue<BytesLike>,
    _epoch: PromiseOrValue<BigNumberish>,
    _tickets: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'issueTickets(bytes32,uint24[],uint16[][])'(
    _networkId: PromiseOrValue<BytesLike>,
    _epochs: PromiseOrValue<BigNumberish>[],
    _tickets: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'issueTickets(bytes)'(
    _ticketInfo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  latestNewEpochRewardAt(overrides?: CallOverrides): Promise<BigNumber>

  payoutDenomination(overrides?: CallOverrides): Promise<BigNumber>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  receiverStaking(overrides?: CallOverrides): Promise<string>

  removeNetwork(
    _networkId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  rewardDistributedPerEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  rewardDistributionWaitTime(overrides?: CallOverrides): Promise<BigNumber>

  rewardWeight(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

  ticketsIssued(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  totalRewardWeight(overrides?: CallOverrides): Promise<BigNumber>

  totalRewardsPerEpoch(overrides?: CallOverrides): Promise<BigNumber>

  updateNetwork(
    _networkId: PromiseOrValue<BytesLike>,
    _updatedRewardWeight: PromiseOrValue<BigNumberish>,
    _updatedClusterSelector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateReceiverStaking(
    _receiverStaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateRewardWaitTime(
    _updatedWaitTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    CLAIMER_ROLE(overrides?: CallOverrides): Promise<string>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    FEEDER_ROLE(overrides?: CallOverrides): Promise<string>

    RECEIVER_TICKETS_PER_EPOCH(overrides?: CallOverrides): Promise<BigNumber>

    addNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _rewardWeight: PromiseOrValue<BigNumberish>,
      _clusterSelector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    changeRewardPerEpoch(_updatedRewardPerEpoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    claimReward(_cluster: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    clusterRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    clusterSelectors(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

    feed(
      _networkId: PromiseOrValue<BytesLike>,
      _clusters: PromiseOrValue<string>[],
      _payouts: PromiseOrValue<BigNumberish>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    getRewardForEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      _networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

    getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    initialize(
      _admin: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _receiverStaking: PromiseOrValue<string>,
      _networkIds: PromiseOrValue<BytesLike>[],
      _rewardWeight: PromiseOrValue<BigNumberish>[],
      _clusterSelectors: PromiseOrValue<string>[],
      _totalRewardsPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    isTicketsIssued(_receiver: PromiseOrValue<string>, _epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    'issueTickets(bytes32,uint24,uint16[])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epoch: PromiseOrValue<BigNumberish>,
      _tickets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>

    'issueTickets(bytes32,uint24[],uint16[][])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epochs: PromiseOrValue<BigNumberish>[],
      _tickets: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>

    'issueTickets(bytes)'(_ticketInfo: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

    latestNewEpochRewardAt(overrides?: CallOverrides): Promise<BigNumber>

    payoutDenomination(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    receiverStaking(overrides?: CallOverrides): Promise<string>

    removeNetwork(_networkId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

    renounceRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    rewardDistributedPerEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    rewardDistributionWaitTime(overrides?: CallOverrides): Promise<BigNumber>

    rewardWeight(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    ticketsIssued(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    totalRewardWeight(overrides?: CallOverrides): Promise<BigNumber>

    totalRewardsPerEpoch(overrides?: CallOverrides): Promise<BigNumber>

    updateNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _updatedRewardWeight: PromiseOrValue<BigNumberish>,
      _updatedClusterSelector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    updateReceiverStaking(_receiverStaking: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    updateRewardWaitTime(_updatedWaitTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter

    'ClusterRewarded(bytes32)'(networkId?: null): ClusterRewardedEventFilter
    ClusterRewarded(networkId?: null): ClusterRewardedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'NetworkAdded(bytes32,uint256,address)'(networkId?: null, rewardPerEpoch?: null, clusterSelector?: null): NetworkAddedEventFilter
    NetworkAdded(networkId?: null, rewardPerEpoch?: null, clusterSelector?: null): NetworkAddedEventFilter

    'NetworkRemoved(bytes32)'(networkId?: null): NetworkRemovedEventFilter
    NetworkRemoved(networkId?: null): NetworkRemovedEventFilter

    'NetworkUpdated(bytes32,uint256,address)'(
      networkId?: null,
      updatedRewardPerEpoch?: null,
      clusterSelector?: null
    ): NetworkUpdatedEventFilter
    NetworkUpdated(networkId?: null, updatedRewardPerEpoch?: null, clusterSelector?: null): NetworkUpdatedEventFilter

    'ReceiverStakingUpdated(address)'(receiverStaking?: null): ReceiverStakingUpdatedEventFilter
    ReceiverStakingUpdated(receiverStaking?: null): ReceiverStakingUpdatedEventFilter

    'RewardDistributionWaitTimeChanged(uint256)'(updatedWaitTime?: null): RewardDistributionWaitTimeChangedEventFilter
    RewardDistributionWaitTimeChanged(updatedWaitTime?: null): RewardDistributionWaitTimeChangedEventFilter

    'RewardPerEpochChanged(uint256)'(updatedRewardPerEpoch?: null): RewardPerEpochChangedEventFilter
    RewardPerEpochChanged(updatedRewardPerEpoch?: null): RewardPerEpochChangedEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter

    'TicketsIssued(bytes32,uint256,address)'(
      networkId?: PromiseOrValue<BytesLike> | null,
      epoch?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): TicketsIssuedEventFilter
    TicketsIssued(
      networkId?: PromiseOrValue<BytesLike> | null,
      epoch?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): TicketsIssuedEventFilter

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter
  }

  estimateGas: {
    CLAIMER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    FEEDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    RECEIVER_TICKETS_PER_EPOCH(overrides?: CallOverrides): Promise<BigNumber>

    addNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _rewardWeight: PromiseOrValue<BigNumberish>,
      _clusterSelector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    changeRewardPerEpoch(
      _updatedRewardPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    claimReward(_cluster: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    clusterRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    clusterSelectors(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    feed(
      _networkId: PromiseOrValue<BytesLike>,
      _clusters: PromiseOrValue<string>[],
      _payouts: PromiseOrValue<BigNumberish>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getRewardForEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      _networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _admin: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _receiverStaking: PromiseOrValue<string>,
      _networkIds: PromiseOrValue<BytesLike>[],
      _rewardWeight: PromiseOrValue<BigNumberish>[],
      _clusterSelectors: PromiseOrValue<string>[],
      _totalRewardsPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    isTicketsIssued(_receiver: PromiseOrValue<string>, _epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    'issueTickets(bytes32,uint24,uint16[])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epoch: PromiseOrValue<BigNumberish>,
      _tickets: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'issueTickets(bytes32,uint24[],uint16[][])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epochs: PromiseOrValue<BigNumberish>[],
      _tickets: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'issueTickets(bytes)'(
      _ticketInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    latestNewEpochRewardAt(overrides?: CallOverrides): Promise<BigNumber>

    payoutDenomination(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    receiverStaking(overrides?: CallOverrides): Promise<BigNumber>

    removeNetwork(_networkId: PromiseOrValue<BytesLike>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    rewardDistributedPerEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    rewardDistributionWaitTime(overrides?: CallOverrides): Promise<BigNumber>

    rewardWeight(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    ticketsIssued(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    totalRewardWeight(overrides?: CallOverrides): Promise<BigNumber>

    totalRewardsPerEpoch(overrides?: CallOverrides): Promise<BigNumber>

    updateNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _updatedRewardWeight: PromiseOrValue<BigNumberish>,
      _updatedClusterSelector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateReceiverStaking(
      _receiverStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateRewardWaitTime(
      _updatedWaitTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    CLAIMER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    FEEDER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    RECEIVER_TICKETS_PER_EPOCH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _rewardWeight: PromiseOrValue<BigNumberish>,
      _clusterSelector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    changeRewardPerEpoch(
      _updatedRewardPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    claimReward(_cluster: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    clusterRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    clusterSelectors(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    feed(
      _networkId: PromiseOrValue<BytesLike>,
      _clusters: PromiseOrValue<string>[],
      _payouts: PromiseOrValue<BigNumberish>[],
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getRewardForEpoch(
      _epoch: PromiseOrValue<BigNumberish>,
      _networkId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _admin: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _receiverStaking: PromiseOrValue<string>,
      _networkIds: PromiseOrValue<BytesLike>[],
      _rewardWeight: PromiseOrValue<BigNumberish>[],
      _clusterSelectors: PromiseOrValue<string>[],
      _totalRewardsPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    isTicketsIssued(
      _receiver: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'issueTickets(bytes32,uint24,uint16[])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epoch: PromiseOrValue<BigNumberish>,
      _tickets: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'issueTickets(bytes32,uint24[],uint16[][])'(
      _networkId: PromiseOrValue<BytesLike>,
      _epochs: PromiseOrValue<BigNumberish>[],
      _tickets: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'issueTickets(bytes)'(
      _ticketInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    latestNewEpochRewardAt(overrides?: CallOverrides): Promise<PopulatedTransaction>

    payoutDenomination(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    receiverStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    rewardDistributedPerEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardDistributionWaitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardWeight(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    ticketsIssued(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalRewardWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalRewardsPerEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateNetwork(
      _networkId: PromiseOrValue<BytesLike>,
      _updatedRewardWeight: PromiseOrValue<BigNumberish>,
      _updatedClusterSelector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateReceiverStaking(
      _receiverStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateRewardWaitTime(
      _updatedWaitTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
