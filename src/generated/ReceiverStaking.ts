/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface ReceiverStakingInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'EPOCH_LENGTH()': FunctionFragment
    'STAKING_TOKEN()': FunctionFragment
    'START_TIME()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'balanceOfAt(address,uint256)': FunctionFragment
    'balanceOfSignerAt(address,uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'deposit(uint256)': FunctionFragment
    'depositAndSetSigner(uint256,address)': FunctionFragment
    'depositFor(uint256,address)': FunctionFragment
    'getEpochInfo(uint256)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'getStakeInfo(address,uint256)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(address,string,string)': FunctionFragment
    'name()': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'setSigner(address)': FunctionFragment
    'signerToStaker(address)': FunctionFragment
    'stakerToSigner(address)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'totalSupplyAt(uint256)': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
    'withdraw(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'EPOCH_LENGTH'
      | 'STAKING_TOKEN'
      | 'START_TIME'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'balanceOfAt'
      | 'balanceOfSignerAt'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositAndSetSigner'
      | 'depositFor'
      | 'getEpochInfo'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'getStakeInfo'
      | 'grantRole'
      | 'hasRole'
      | 'increaseAllowance'
      | 'initialize'
      | 'name'
      | 'proxiableUUID'
      | 'renounceRole'
      | 'revokeRole'
      | 'setSigner'
      | 'signerToStaker'
      | 'stakerToSigner'
      | 'supportsInterface'
      | 'symbol'
      | 'totalSupply'
      | 'totalSupplyAt'
      | 'transfer'
      | 'transferFrom'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'EPOCH_LENGTH', values?: undefined): string
  encodeFunctionData(functionFragment: 'STAKING_TOKEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'START_TIME', values?: undefined): string
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'approve', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'balanceOfAt', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'balanceOfSignerAt', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'depositAndSetSigner', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'depositFor', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'getEpochInfo', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'getRoleMember', values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'getStakeInfo', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'grantRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'revokeRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'setSigner', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'signerToStaker', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'stakerToSigner', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupplyAt', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'transfer', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'EPOCH_LENGTH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'STAKING_TOKEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'START_TIME', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOfAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOfSignerAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositAndSetSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getEpochInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getStakeInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'signerToStaker', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakerToSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupplyAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'BalanceUpdated(address,uint256,uint256)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'Initialized(uint8)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'SignerUpdated(address,address,address)': EventFragment
    'Snapshot(uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BalanceUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SignerUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Snapshot'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface ApprovalEventObject {
  owner: string
  spender: string
  value: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface BalanceUpdatedEventObject {
  staker: string
  epoch: BigNumber
  balance: BigNumber
}
export type BalanceUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], BalanceUpdatedEventObject>

export type BalanceUpdatedEventFilter = TypedEventFilter<BalanceUpdatedEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface SignerUpdatedEventObject {
  staker: string
  from: string
  to: string
}
export type SignerUpdatedEvent = TypedEvent<[string, string, string], SignerUpdatedEventObject>

export type SignerUpdatedEventFilter = TypedEventFilter<SignerUpdatedEvent>

export interface SnapshotEventObject {
  id: BigNumber
}
export type SnapshotEvent = TypedEvent<[BigNumber], SnapshotEventObject>

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>

export interface TransferEventObject {
  from: string
  to: string
  value: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface ReceiverStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ReceiverStakingInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>

    STAKING_TOKEN(overrides?: CallOverrides): Promise<[string]>

    START_TIME(overrides?: CallOverrides): Promise<[BigNumber]>

    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    balanceOfAt(account: PromiseOrValue<string>, snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

    balanceOfSignerAt(
      signer: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { balance: BigNumber; account: string }>

    decimals(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    depositAndSetSigner(
      _amount: PromiseOrValue<BigNumberish>,
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositFor(
      _amount: PromiseOrValue<BigNumberish>,
      _staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getEpochInfo(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalStake: BigNumber
        currentEpoch: BigNumber
      }
    >

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>

    getStakeInfo(
      _user: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _userStake: BigNumber
        _totalStake: BigNumber
        _currentEpoch: BigNumber
      }
    >

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>

    getStakeInfo(
      _user: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _userStake: BigNumber
        _totalStake: BigNumber
        _currentEpoch: BigNumber
      }
    >

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    initialize(
      _admin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSigner(_signer: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    signerToStaker(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>

    stakerToSigner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupplyAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(_amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>

  STAKING_TOKEN(overrides?: CallOverrides): Promise<string>

  START_TIME(overrides?: CallOverrides): Promise<BigNumber>

  allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  balanceOfAt(account: PromiseOrValue<string>, snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  balanceOfSignerAt(
    signer: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { balance: BigNumber; account: string }>

  decimals(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  depositAndSetSigner(
    _amount: PromiseOrValue<BigNumberish>,
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositFor(
    _amount: PromiseOrValue<BigNumberish>,
    _staker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getEpochInfo(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { totalStake: BigNumber; currentEpoch: BigNumber }>

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

  getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

  getStakeInfo(
    _user: PromiseOrValue<string>,
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { totalStake: BigNumber; currentEpoch: BigNumber }>

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

  getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

  getStakeInfo(
    _user: PromiseOrValue<string>,
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _userStake: BigNumber
      _totalStake: BigNumber
      _currentEpoch: BigNumber
    }
  >

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  initialize(
    _admin: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setSigner(_signer: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  signerToStaker(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

  stakerToSigner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  totalSupplyAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(_amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>

    STAKING_TOKEN(overrides?: CallOverrides): Promise<string>

    START_TIME(overrides?: CallOverrides): Promise<BigNumber>

    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfAt(account: PromiseOrValue<string>, snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfSignerAt(
      signer: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { balance: BigNumber; account: string }>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    depositAndSetSigner(_amount: PromiseOrValue<BigNumberish>, _signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    depositFor(_amount: PromiseOrValue<BigNumberish>, _staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    getEpochInfo(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalStake: BigNumber
        currentEpoch: BigNumber
      }
    >

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

    getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    getStakeInfo(
      _user: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _userStake: BigNumber
        _totalStake: BigNumber
        _currentEpoch: BigNumber
      }
    >

    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _admin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    renounceRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    setSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    signerToStaker(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    stakerToSigner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

    withdraw(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter
    Approval(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter

    'BalanceUpdated(address,uint256,uint256)'(
      staker?: PromiseOrValue<string> | null,
      epoch?: PromiseOrValue<BigNumberish> | null,
      balance?: null
    ): BalanceUpdatedEventFilter
    BalanceUpdated(
      staker?: PromiseOrValue<string> | null,
      epoch?: PromiseOrValue<BigNumberish> | null,
      balance?: null
    ): BalanceUpdatedEventFilter

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter

    'SignerUpdated(address,address,address)'(
      staker?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): SignerUpdatedEventFilter
    SignerUpdated(
      staker?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): SignerUpdatedEventFilter

    'Snapshot(uint256)'(id?: null): SnapshotEventFilter
    Snapshot(id?: null): SnapshotEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter
    Transfer(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>

    STAKING_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    START_TIME(overrides?: CallOverrides): Promise<BigNumber>

    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfAt(account: PromiseOrValue<string>, snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    balanceOfSignerAt(
      signer: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    depositAndSetSigner(
      _amount: PromiseOrValue<BigNumberish>,
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositFor(
      _amount: PromiseOrValue<BigNumberish>,
      _staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getEpochInfo(epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMember(role: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    getStakeInfo(_user: PromiseOrValue<string>, _epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    initialize(
      _admin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setSigner(_signer: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    signerToStaker(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    stakerToSigner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    totalSupplyAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(_amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    EPOCH_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    STAKING_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    START_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>

    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    balanceOfSignerAt(
      signer: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    depositAndSetSigner(
      _amount: PromiseOrValue<BigNumberish>,
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositFor(
      _amount: PromiseOrValue<BigNumberish>,
      _staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getEpochInfo(epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getStakeInfo(
      _user: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    initialize(
      _admin: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setSigner(_signer: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    signerToStaker(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    stakerToSigner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupplyAt(snapshotId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
